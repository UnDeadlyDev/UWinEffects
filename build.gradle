plugins {
    id 'java'
    // https://github.com/GradleUp/shadow
    id 'com.gradleup.shadow' version '9.0.2'
    // https://github.com/Minecrell/plugin-yml
    id 'net.minecrell.plugin-yml.bukkit' version '0.6.0'
}

group 'com.undeadlydev'
version '1.0.4'

bukkit {
    name = 'UWinEffects'
    main = 'com.undeadlydev.UWinEffects.Main'
    version = project.version
    apiVersion = '1.13'
    author = 'UnDeadlyDev'
    softDepend = ['PlaceholderAPI', 'Vault']
}

repositories {
    mavenCentral()

    // SPIGOT
    maven { url 'https://hub.spigotmc.org/nexus/content/groups/public/' }
    // VAULT
    maven { url 'https://jitpack.io' }
    // PLACEHOLDERSAPI
    maven { url 'https://repo.extendedclip.com/content/repositories/placeholderapi/' }
    //NBTEditor
    maven { url 'https://repo.codemc.org/repository/maven-public/' }
    // CITIZENS
    maven {
        name = 'citizens-repo'
        url = 'https://maven.citizensnpcs.co/repo'
    }
}

dependencies {
    // https://hub.spigotmc.org/stash/projects/SPIGOT/repos/spigot/browse
    compileOnly 'org.spigotmc:spigot-api:1.21.8-R0.1-SNAPSHOT'

    // https://github.com/PlaceholderAPI/PlaceholderAPI
    compileOnly 'me.clip:placeholderapi:2.11.6'

    // https://github.com/MilkBowl/VaultAPI
    compileOnly('net.milkbowl.vault:VaultAPI:1.7') {
        exclude group: 'org.bukkit'
    }

    compileOnly('net.citizensnpcs:citizens-main:2.0.35-SNAPSHOT') {
        exclude group: '*', module: '*'
    }

    compileOnly "net.kyori:adventure-api:4.24.0"

    compileOnly "net.kyori:adventure-platform-bukkit:4.4.1"

    // https://github.com/Bastian/bstats-metrics
    implementation 'org.bstats:bstats-bukkit:3.1.0'

    // https://github.com/BananaPuncher714/NBTEditor
    implementation 'io.github.bananapuncher714:nbteditor:7.19.10'

    // https://github.com/CryptoMorin/XSeries
    library 'com.github.cryptomorin:XSeries:13.3.3'

    // https://github.com/brettwooldridge/HikariCP
    library 'com.zaxxer:HikariCP:7.0.2'

    implementation 'com.github.Eisi05:NpcApi-Paper:1.21.8'

    implementation 'com.github.datatags.MobChipLite:mobchip-bukkit:1.10.14'

}

shadowJar {
    archiveFileName = "${rootProject.name}-${version}.jar"

    def path = 'com.undeadlydev.UWinEffects.libraries'
    minimize {
        exclude(dependency('com.github.datatags.MobChipLite:.*:.*'))
    }
    relocate 'org.bstats', path +'.bstats'
    relocate 'io.github.bananapuncher714.nbteditor', path + '.nbteditor'
    relocate 'de.eisi05.npc.api', path + '.npcapi'
    relocate 'me.gamercoder215.mobchip', path + '.mobchip'
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
    options.compilerArgs << '-Xlint:unchecked' << '-Xlint:deprecation'
}

tasks.register('validateLibraryLoaderDeps') {
    doLast {
        def repoUrl = "https://maven-central.storage-download.googleapis.com/maven2"
        def configToCheck = configurations.library

        def externalDeps = configToCheck.allDependencies.findAll {
            it instanceof ExternalModuleDependency && it.version
        }

        def missing = []

        externalDeps.each { dep ->
            def groupPath = dep.group.replace('.', '/')
            def fullUrl = "${repoUrl}/${groupPath}/${dep.name}/${dep.version}/${dep.name}-${dep.version}.pom"
            def gav = "${dep.group}:${dep.name}:${dep.version}"

            try {
                def connection = new URL(fullUrl).openConnection() as HttpURLConnection
                connection.requestMethod = "HEAD"
                connection.connectTimeout = 5000
                connection.readTimeout = 5000

                if (connection.responseCode == 200) {
                    println "Found: ${gav}"
                } else {
                    println "Missing: ${gav} (HTTP ${connection.responseCode})"
                    missing << fullUrl
                }
            } catch (Exception e) {
                println "Error checking ${gav} - ${e.message}"
                missing << fullUrl
            }
        }

        if (!missing.isEmpty()) {
            println "The following dependencies were not found:"
            missing.each { println " - $it" }
            throw new GradleException("Some dependencies were not found in the repository.")
        } else {
            println "All dependencies found in ${repoUrl}."
        }
    }
}

processResources {
    inputs.property('version', project.version)
}
